
// This file was autogenerated by PeakRDL-uvm
package fwperiph_dma_ral;
    `include "uvm_macros.svh"
    import uvm_pkg::*;
    
    // Reg - fwperiph_dma_csr
    class fwperiph_dma_csr extends uvm_reg;
        rand uvm_reg_field pause;

        function new(string name = "fwperiph_dma_csr");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.pause = new("pause");
            this.pause.configure(this, 1, 0, "RW", 1, 'h0, 0, 1, 0);
        endfunction : build
    endclass : fwperiph_dma_csr

    // Reg - fwperiph_dma_int_msk_a
    class fwperiph_dma_int_msk_a extends uvm_reg;
        rand uvm_reg_field mask;

        function new(string name = "fwperiph_dma_int_msk_a");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.mask = new("mask");
            this.mask.configure(this, 32, 0, "RW", 0, 'h0, 0, 1, 0);
        endfunction : build
    endclass : fwperiph_dma_int_msk_a

    // Reg - fwperiph_dma_int_msk_b
    class fwperiph_dma_int_msk_b extends uvm_reg;
        rand uvm_reg_field mask;

        function new(string name = "fwperiph_dma_int_msk_b");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.mask = new("mask");
            this.mask.configure(this, 32, 0, "RW", 0, 'h0, 0, 1, 0);
        endfunction : build
    endclass : fwperiph_dma_int_msk_b

    // Reg - fwperiph_dma_int_src_a
    class fwperiph_dma_int_src_a extends uvm_reg;
        rand uvm_reg_field source;

        function new(string name = "fwperiph_dma_int_src_a");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.source = new("source");
            this.source.configure(this, 32, 0, "RW", 0, 'h0, 0, 1, 0);
        endfunction : build
    endclass : fwperiph_dma_int_src_a

    // Reg - fwperiph_dma_int_src_b
    class fwperiph_dma_int_src_b extends uvm_reg;
        rand uvm_reg_field source;

        function new(string name = "fwperiph_dma_int_src_b");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.source = new("source");
            this.source.configure(this, 32, 0, "RW", 0, 'h0, 0, 1, 0);
        endfunction : build
    endclass : fwperiph_dma_int_src_b

    // Reg - fwperiph_dma_channel_csr
    class fwperiph_dma_channel_csr extends uvm_reg;
        rand uvm_reg_field en;
        rand uvm_reg_field dst_sel;
        rand uvm_reg_field src_sel;
        rand uvm_reg_field inc_dst;
        rand uvm_reg_field inc_src;
        rand uvm_reg_field mode;
        rand uvm_reg_field ars;
        rand uvm_reg_field use_ed;
        rand uvm_reg_field sz_wb;
        rand uvm_reg_field stop;
        rand uvm_reg_field busy;
        rand uvm_reg_field done;
        rand uvm_reg_field err;
        rand uvm_reg_field priority;

        function new(string name = "fwperiph_dma_channel_csr");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.en = new("en");
            this.en.configure(this, 1, 0, "RW", 1, 'h0, 0, 1, 0);
            this.dst_sel = new("dst_sel");
            this.dst_sel.configure(this, 1, 1, "RW", 1, 'h0, 0, 1, 0);
            this.src_sel = new("src_sel");
            this.src_sel.configure(this, 1, 2, "RW", 1, 'h0, 0, 1, 0);
            this.inc_dst = new("inc_dst");
            this.inc_dst.configure(this, 1, 3, "RW", 1, 'h0, 0, 1, 0);
            this.inc_src = new("inc_src");
            this.inc_src.configure(this, 1, 4, "RW", 1, 'h0, 0, 1, 0);
            this.mode = new("mode");
            this.mode.configure(this, 1, 5, "RW", 1, 'h0, 0, 1, 0);
            this.ars = new("ars");
            this.ars.configure(this, 1, 6, "RW", 1, 'h0, 0, 1, 0);
            this.use_ed = new("use_ed");
            this.use_ed.configure(this, 1, 7, "RW", 1, 'h0, 0, 1, 0);
            this.sz_wb = new("sz_wb");
            this.sz_wb.configure(this, 1, 8, "RW", 1, 'h0, 0, 1, 0);
            this.stop = new("stop");
            this.stop.configure(this, 1, 9, "WO", 1, 'h0, 0, 1, 0);
            this.busy = new("busy");
            this.busy.configure(this, 1, 10, "RO", 1, 'h0, 0, 1, 0);
            this.done = new("done");
            this.done.configure(this, 1, 11, "RO", 1, 'h0, 0, 1, 0);
            this.err = new("err");
            this.err.configure(this, 1, 12, "RO", 1, 'h0, 0, 1, 0);
            this.priority = new("priority");
            this.priority.configure(this, 3, 13, "RO", 1, 'h0, 0, 1, 0);
        endfunction : build
    endclass : fwperiph_dma_channel_csr

    // Reg - fwperiph_dma_channel_sz
    class fwperiph_dma_channel_sz extends uvm_reg;
        rand uvm_reg_field tot_sz;
        rand uvm_reg_field chk_sz;

        function new(string name = "fwperiph_dma_channel_sz");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.tot_sz = new("tot_sz");
            this.tot_sz.configure(this, 12, 0, "RW", 1, 'h0, 0, 1, 0);
            this.chk_sz = new("chk_sz");
            this.chk_sz.configure(this, 9, 16, "RW", 1, 'h0, 0, 1, 0);
        endfunction : build
    endclass : fwperiph_dma_channel_sz

    // Reg - fwperiph_dma_channel_addr
    class fwperiph_dma_channel_addr extends uvm_reg;
        rand uvm_reg_field addr;

        function new(string name = "fwperiph_dma_channel_addr");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.addr = new("addr");
            this.addr.configure(this, 30, 2, "RW", 0, 'h0, 0, 1, 0);
        endfunction : build
    endclass : fwperiph_dma_channel_addr

    // Reg - fwperiph_dma_channel_mask
    class fwperiph_dma_channel_mask extends uvm_reg;
        rand uvm_reg_field mask;

        function new(string name = "fwperiph_dma_channel_mask");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.mask = new("mask");
            this.mask.configure(this, 28, 4, "RW", 0, 'h0, 0, 1, 0);
        endfunction : build
    endclass : fwperiph_dma_channel_mask

    // Reg - fwperiph_dma_channel_desc
    class fwperiph_dma_channel_desc extends uvm_reg;
        rand uvm_reg_field desc;

        function new(string name = "fwperiph_dma_channel_desc");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.desc = new("desc");
            this.desc.configure(this, 30, 2, "RW", 0, 'h0, 0, 1, 0);
        endfunction : build
    endclass : fwperiph_dma_channel_desc

    // Reg - fwperiph_dma_channel_swptr
    class fwperiph_dma_channel_swptr extends uvm_reg;
        rand uvm_reg_field swptr;
        rand uvm_reg_field swptr_en;

        function new(string name = "fwperiph_dma_channel_swptr");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.swptr = new("swptr");
            this.swptr.configure(this, 29, 2, "RW", 0, 'h0, 0, 1, 0);
            this.swptr_en = new("swptr_en");
            this.swptr_en.configure(this, 1, 31, "RW", 0, 'h0, 0, 1, 0);
        endfunction : build
    endclass : fwperiph_dma_channel_swptr

    // Regfile - fwperiph_dma_channel
    class fwperiph_dma_channel extends uvm_reg_block;
        rand fwperiph_dma_channel_csr CSR;
        rand fwperiph_dma_channel_sz SZ;
        rand fwperiph_dma_channel_addr SRC_ADDR;
        rand fwperiph_dma_channel_mask SRC_MASK;
        rand fwperiph_dma_channel_addr DST_ADDR;
        rand fwperiph_dma_channel_mask DST_MASK;
        rand fwperiph_dma_channel_desc DESC;
        rand fwperiph_dma_channel_swptr SWPTR;

        function new(string name = "fwperiph_dma_channel");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            this.CSR = new("CSR");
            this.CSR.configure(this);

            this.CSR.build();
            this.default_map.add_reg(this.CSR, 'h0);
            this.SZ = new("SZ");
            this.SZ.configure(this);

            this.SZ.build();
            this.default_map.add_reg(this.SZ, 'h4);
            this.SRC_ADDR = new("SRC_ADDR");
            this.SRC_ADDR.configure(this);

            this.SRC_ADDR.build();
            this.default_map.add_reg(this.SRC_ADDR, 'h8);
            this.SRC_MASK = new("SRC_MASK");
            this.SRC_MASK.configure(this);

            this.SRC_MASK.build();
            this.default_map.add_reg(this.SRC_MASK, 'hc);
            this.DST_ADDR = new("DST_ADDR");
            this.DST_ADDR.configure(this);

            this.DST_ADDR.build();
            this.default_map.add_reg(this.DST_ADDR, 'h10);
            this.DST_MASK = new("DST_MASK");
            this.DST_MASK.configure(this);

            this.DST_MASK.build();
            this.default_map.add_reg(this.DST_MASK, 'h14);
            this.DESC = new("DESC");
            this.DESC.configure(this);

            this.DESC.build();
            this.default_map.add_reg(this.DESC, 'h18);
            this.SWPTR = new("SWPTR");
            this.SWPTR.configure(this);

            this.SWPTR.build();
            this.default_map.add_reg(this.SWPTR, 'h1c);
        endfunction : build
    endclass : fwperiph_dma_channel

    // Addrmap - fwperiph_dma_map
    class fwperiph_dma_map extends uvm_reg_block;
        rand fwperiph_dma_csr csr;
        rand fwperiph_dma_int_msk_a int_msk_a;
        rand fwperiph_dma_int_msk_b int_msk_b;
        rand fwperiph_dma_int_src_a int_src_a;
        rand fwperiph_dma_int_src_b int_src_b;
        rand fwperiph_dma_channel channels[31];

        function new(string name = "fwperiph_dma_map");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            this.csr = new("csr");
            this.csr.configure(this);

            this.csr.build();
            this.default_map.add_reg(this.csr, 'h0);
            this.int_msk_a = new("int_msk_a");
            this.int_msk_a.configure(this);

            this.int_msk_a.build();
            this.default_map.add_reg(this.int_msk_a, 'h4);
            this.int_msk_b = new("int_msk_b");
            this.int_msk_b.configure(this);

            this.int_msk_b.build();
            this.default_map.add_reg(this.int_msk_b, 'h8);
            this.int_src_a = new("int_src_a");
            this.int_src_a.configure(this);

            this.int_src_a.build();
            this.default_map.add_reg(this.int_src_a, 'hc);
            this.int_src_b = new("int_src_b");
            this.int_src_b.configure(this);

            this.int_src_b.build();
            this.default_map.add_reg(this.int_src_b, 'h10);
            foreach(this.channels[i0]) begin
                this.channels[i0] = new($sformatf("channels[%0d]", i0));
                this.channels[i0].configure(this);
                this.channels[i0].build();
                this.default_map.add_submap(this.channels[i0].default_map, 'h20 + i0*'h20);
            end
        endfunction : build
    endclass : fwperiph_dma_map

endpackage: fwperiph_dma_ral
